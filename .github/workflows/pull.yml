name: pull specified llvm, upd standlaone project by extracting the code from llvm project, and create PR if updated

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch and Commit hash to pull'
        required: true
        default: 'e.g. refs/tags/llvmorg-15.0.6 or main'

jobs:
  pull_and_create_pr:
    name: pull latest llvm project and create PR if updated
    runs-on: ubuntu-latest
    steps:
      - name: checkout Template Code in a separate folder
        uses: actions/checkout@v2
        with:
          path: 'mlir-standalone-template'
      - name: Load .env file
        uses: xom9ikk/dotenv@v2
        with:
          load-mode: strict
          path: 'mlir-standalone-template/'
      - name: Get LLVM at the input branch and commit
        uses: actions/checkout@v2
        with:
          repository: 'llvm/llvm-project'
          path: 'llvm-project'
          ref: ${{ github.event.inputs.ref }}
      - name: Set environment variable llvm commit hash in llvm-project/mlir/examples/standalone/
        run: | # hash of the latest commit to pull
          echo "MLIR_EXAMPLE_HASH=$(cd llvm-project && git log --pretty=tformat:"%H" -n1 ./mlir/examples/standalone/)" >> $GITHUB_ENV
      - name: Get template code commit hash by using .github/workflows/get_commit_hash_from_yml.py
        run: | # branch/tag name or hash of the commit of this current repo
          cd $GITHUB_WORKSPACE/mlir-standalone-template
          echo "TEMPLATE_COMMIT_HASH=$(python ./.github/workflows/get_commit_hash_from_yml.py)" >> $GITHUB_ENV
      - name: Update if the two strings TEMPLATE_COMMIT_HASH and MLIR_EXAMPLE_HASH are different. push to the TEMPLATE_COMMIT_HASH branch. create pull request
        if: env.TEMPLATE_COMMIT_HASH != env.MLIR_EXAMPLE_HASH # TODO: check if the case where TEMPLATE_COMMIT_HASH is branch name can be correctly handled (tag name is fine now)
        run: |
          cd $GITHUB_WORKSPACE/mlir-standalone-template
          cp -r $GITHUB_WORKSPACE/llvm-project/mlir/examples/standalone/* .
          python .github/workflows/replace_commit_hash_in_yml.py ${{ github.event.inputs.ref }} ${{ env.MLIR_EXAMPLE_HASH }}
          git config --local user.email "github-actions@github.com"
          git config --local user.name "github-actions"
          git checkout -b "gh_latest_llvm${{ env.MLIR_EXAMPLE_HASH }}"
          git add .
          git commit -m "Update to LLVM commit ${{ env.MLIR_EXAMPLE_HASH }}"
          git push origin "gh_latest_llvm${{ env.MLIR_EXAMPLE_HASH }}"
          gh pr create --title "Update to LLVM commit ${{ env.MLIR_EXAMPLE_HASH }}" --body "Update to LLVM commit ${{ env.MLIR_EXAMPLE_HASH }}" --base main --head "gh_latest_llvm${{ env.MLIR_EXAMPLE_HASH }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}